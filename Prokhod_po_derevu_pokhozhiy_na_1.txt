#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <cmath>
#include <string>
#include <iomanip>
using namespace std;

class list
{
	class elem
	{
	public:
		int val;
		elem* left = nullptr, * right = nullptr, * next, * prev;
	};
	elem* ptrstart = nullptr, * ptrend = nullptr;
public:
	int len = 0;
	void PushBack(int value)
	{
		elem* ptr = new elem;
		ptr->val = value;
		if (!ptrstart)
		{
			ptrstart = ptr;
			ptrend = ptr;
		}
		else
		{
			ptrend->next = ptr;
			ptr->prev = ptrend;
			ptrend = ptr;
			ptrend->next = nullptr;
		}
		len++;
	}

	void Tree()
	{
		elem* ptr = new elem, * p0 = new elem;
		ptr = ptrstart;
		int x = len / 2 - 1;
		while (x)
		{
			ptr = ptr->next;
			x--;
		}
		for (int i = len / 2 - 1; i >= 0; i--)
		{
			p0 = ptr;
			if (2 * i + 2 < len)
			{
				x = i + 2;
				while (x)
				{
					p0 = p0->next;
					x--;
				}
				ptr->right = p0;
				ptr->left = p0->prev;
			}
			else if (2 * i + 1 < len)
			{
				x = i + 1;
				while (x)
				{
					p0 = p0->next;
					x--;
				}
				ptr->left = p0;
			}
			ptr = ptr->prev;
		}
	}


	void PrintTree(int n, string* s)
	{
		elem* ptr = new elem;
		ptr = ptrstart;
		if (ptrstart->val != -1)
		{
			cout << ptrstart->val << endl;
		}
		else
		{
			cout << "empty" << endl;
		}
		for (int i = 0; i < n; i++)
		{
			if (s[i] == "left")
			{
				if (ptr != nullptr)
				{
					ptr = ptr->left;
				}
				if (ptr != nullptr && ptr->val != -1)
				{
					cout << ptr->val << endl;
				}
				else
				{
					cout << "empty" << endl;
				}
			}
			else
			{
				if (ptr != nullptr)
				{
					ptr = ptr->right;
				}
				if (ptr != nullptr && ptr->val != -1)
				{
					cout << ptr->val << endl;
				}
				else
				{
					cout << "empty" << endl;
				}
			}
		}
	}
};

int main()
{
	//freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
	list l;
	int a, n, m;
	cin >> n;
	for (int i = 0; i < n; i++)
	{
		cin >> a;
		l.PushBack(a);
	}
	cin >> m;
	string* s = new string[m];
	for (int i = 0; i < m; i++)
	{
		cin >> s[i];
	}
	l.Tree();
	l.PrintTree(m, s);
}