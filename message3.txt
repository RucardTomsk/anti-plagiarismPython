#include <iostream>
#include <time.h>
#include <cmath>
#include <algorithm>
#include <climits>
#include <cfloat>
#include <vector>
#include <string.h>
#include <iomanip>
using namespace std;

double e = 2.718281828459045;

unsigned long long llrand() {
	unsigned long long int r = 0;

	for (int i = 0; i < 5; ++i) {
		r = (r << 15) | (rand() & 0x7FFF);
	}

	return r & 0xFFFFFFFFFFFFFFFFULL;
}

double rnd(double p1, double p2, double ep)
{
	return (double)(llrand() % (int)(ep * (p2 - p1) + 1) + p1 * ep) / ep;
}

struct vertex {
	int x, y;
};

struct ant {
	int path[100];
	int visited[100];
	double length;
	int current;
};

int n;
vertex v[100];

double l[100][100];
double pheromones[100][100];
ant ants[20];
ant sol;



int main()
{
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	srand(time(NULL));

	sol.length = DBL_MAX;

	cin >> n;

	for (int i = 0; i < n; i++)
	{
		cin >> v[i].x >> v[i].y;

		for (int j = 0; j <= i; j++)
		{
			l[i][j] = sqrt((v[i].x - v[j].x)*(v[i].x - v[j].x) + (v[i].y - v[j].y)*(v[i].y - v[j].y));
			l[j][i] = l[i][j];
			pheromones[i][j] = 1.0 / n;
			pheromones[j][i] = 1.0 / n;
		}
	}

	for (int it = 0; it < 200; it++)
	{
		for (int i = 0; i < 20; i++)
		{
			int p = rand() % n;
			ants[i].path[0] = p;
			memset(ants[i].visited, 0, 100);
			ants[i].length = 0;
			ants[i].visited[p] = 1;
			ants[i].current = p;
		}

		for (int i = 0; i < n; i++)
			for (int j = 0; j < n; j++)
				pheromones[i][j] = (pheromones[i][j] * (1 - 0.5) < 1.0 / (double)n) ? 1.0 / (double)n : pheromones[i][j] * (1 - 0.5);


		for (int i = 1; i < n; i++)
		{
			for (int j = 0; j < 20; j++)
			{
				double prob = rnd(0, 1, 100000);
				double p = 0;
				double s = 0;
				for (int k = 0; k < n; k++)
					if (ants[j].visited[k] == 0)	
						s += pow(pheromones[ants[j].current][k], 1) * pow((1.0 / l[ants[j].current][k]), 3);
				for (int k = 0; k < n; k++)
					if (ants[j].visited[k] == 0)
					{
						p += (double)(pow(pheromones[ants[j].current][k], 1) * pow(1.0 / l[ants[j].current][k], 3)) / s;
						if (prob < p)
						{
							ants[j].path[i] = k;
							ants[j].visited[k] = 1;
							ants[j].length += l[ants[j].current][k];
							ants[j].current = k;
							break;
						}
					}

			}
		}
		for (int j = 0; j < 20; j++)
		{
			ants[j].length += l[ants[j].current][ants[j].path[0]];
		}
		for (int i = 0; i < 20; i++)
			for (int j = 0; j < n; j++)
			{
				pheromones[ants[i].path[j]][ants[i].path[(j + 1) % n]] += 1.0 / ants[i].length;
				pheromones[ants[i].path[(j + 1) % n]][ants[i].path[j]] = pheromones[ants[i].path[j]][ants[i].path[(j + 1) % n]];
			}

		for (int i = 0; i < 20; i++)
		{
			if (sol.length > ants[i].length)
				sol = ants[i];
		}
	}

	cout << fixed << setprecision(10) << sol.length << endl;

	for (int i = 0; i < n; i++)
	{
		printf("%d", sol.path[i] + 1);
		cout << " ";
	}
}